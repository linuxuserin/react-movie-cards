{"version":3,"sources":["components/navBar.js","components/imdbMovieCard.js","components/movieList.js","services/MovieService.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","href","Movie","src","movie","Poster","alt","style","height","Title","fontSize","rel","imdbID","target","Year","MovieList","undefined","movies","map","id","key","MovieService","SearchBar","type","placeholder","name","value","onChange","e","handleChange","onClick","HandleSearch","App","state","movieSearch","imdbMovies","event","checked","setState","preventDefault","fetch","then","response","json","data","Search","this","getMovies","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1bd5271b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NavBar(props) {\n    return (\n        <nav className=\"header navbar navbar-dark bg-dark\">\n        <div className=\"container\">\n            <div className=\"row m-auto\">\n                <i className=\"fa fa-film fa-2x text-white my-auto\"></i>\n                <div className=\"h3 ml-3 my-auto text-light\" href=\"/\">React Movie Cards</div>\n            </div>\n        </div>\n    </nav>\n    );\n  }\n  \n  export default NavBar;","import React from \"react\";\n\nconst Movie = (props) => {\n  return (\n    <div className=\"movie-card\">\n      <div className=\"movie-card card\">\n        <img\n          className=\"card-img-top\"\n          src={props.movie.Poster}\n          //   alt={props.movie.imdbID}\n          alt=\"Poster isn't available right now\"\n          style={{ height: \"200px\" }}\n        />\n        <div className=\"card-body\">\n          <h4 className=\"card-title\">{props.movie.Title}</h4>\n          <h6 className=\"card-subtitle mb-2 text-muted\">{}</h6>\n          <p className=\"text-justify\" style={{ fontSize: \"14px\" }}>\n            {}\n            Watch on IMDB{\" \"}\n            <a\n              rel=\"noopener noreferrer\"\n              href={`https://www.imdb.com/title/` + props.movie.imdbID}\n              target=\"_blank\"\n            >\n              {props.movie.Title}\n            </a>\n          </p>\n        </div>\n        <div className=\"card-footer\">\n          <div className=\"clearfix\">\n            <div className=\"float-left mt-1\">Year:</div>\n            <div className=\"card-footer-badge float-right badge badge-primary badge-pill\">\n              {props.movie.Year}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React from \"react\";\nimport Movie from \"./imdbMovieCard\";\n\nconst getMovies = (movies) => {\n  return (\n    <div className=\"card-deck\">\n      {movies.map((movie, id) => (\n        <Movie key={id} movie={movie} />\n      ))}\n    </div>\n  );\n};\n\nconst MovieList = (props) => {\n  return (\n    <div>\n      {props.movies === undefined\n        ? \"You haven't entered any queries\"\n        : getMovies(props.movies)}\n    </div>\n  );\n};\n\nexport default MovieList;\n","import movies from './movies.json';\n\nexport default class MovieService {\n    static getMovies() {\n        return movies ? movies : [];\n    }\n}","import React from \"react\";\n\nfunction SearchBar(props) {\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"col-12 col-md-10 col-lg-12\">\n          <form className=\"\">\n            <div className=\"card-body row no-gutters align-items-center\">\n              <div className=\"col-auto\">\n                <i className=\"fas fa-search h4 text-body\"></i>\n              </div>\n              <div className=\"col\">\n                <input\n                  className=\"form-control form-control-lg form-control-borderless\"\n                  type=\"search\"\n                  placeholder=\"Search Movies\"\n                  name=\"movieSearch\"\n                  value={props.value}\n                  onChange={(e) => props.handleChange(e)}\n                />\n              </div>\n              <div className=\"col-auto\">\n                <button\n                  className=\"btn btn-lg btn-success\"\n                  type=\"submit\"\n                  onClick={(e) => props.HandleSearch(e)}\n                >\n                  Search\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navBar\";\nimport MovieList from \"./components/movieList\";\nimport MovieService from \"./services/MovieService\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import \"bootstrap/dist/js/bootstrap\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\n\nclass App extends Component {\n  state = {\n    movies: [],\n    movieSearch: \"\",\n    imdbMovies: [],\n  };\n\n  componentDidMount() {\n    this.setState(() => ({ movies: MovieService.getMovies() }));\n  }\n\n  handleChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    type === \"checkbox\"\n      ? this.setState({\n          [name]: checked,\n        })\n      : this.setState({\n          [name]: value,\n        });\n  };\n\n  HandleSearch = (e) => {\n    e.preventDefault();\n    //fetch repos\n    fetch(\n      `https://www.omdbapi.com/?apikey=ed29cefd&y=&plot=short&r=json&page=1-100&s=` +\n        this.state.movieSearch\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState(() => ({\n          imdbMovies: data.Search,\n        }));\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <SearchBar\n          value={this.state.movieSearch}\n          handleChange={this.handleChange}\n          HandleSearch={this.HandleSearch}\n        />\n        <main className=\"container\">\n          {this.state.movieSearch === \"\" ? (\n            \"Movies will appears here\"\n          ) : (\n            <MovieList movies={this.state.imdbMovies} />\n          )}\n          {/* <MovieList movies={this.state.movies} /> */}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}