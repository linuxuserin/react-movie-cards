{"version":3,"sources":["components/navBar.js","components/movieCard.js","components/movieList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","href","Movie","src","movie","imageUrl","alt","title","subtitle","style","fontSize","description","rating","MovieList","movies","map","key","id","App","state","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAeiBA,MAbjB,SAAgBC,GACZ,OACI,yBAAKC,UAAU,qCACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,wCACb,yBAAKA,UAAU,6BAA6BC,KAAK,KAAjD,yBCiBDC,EAvBD,SAACH,GACX,OACI,yBAAKC,UAAU,cACf,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,eAAeG,IAAKJ,EAAMK,MAAMC,SAAUC,IAAI,KAC7D,yBAAKN,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAMK,MAAMG,OACxC,wBAAIP,UAAU,iCAAiCD,EAAMK,MAAMI,UAC3D,uBAAGR,UAAU,eAAeS,MAAO,CAACC,SAAU,SAAUX,EAAMK,MAAMO,cAExE,yBAAKX,UAAU,eACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,mBAAf,WAGA,yBAAKA,UAAU,gEAAgED,EAAMK,MAAMQ,aCKhGC,EARG,SAACd,GACf,OACI,8BAbWe,EAcIf,EAAMe,OAZrB,yBAAKd,UAAU,aAEPc,EAAOC,KAAI,SAAAX,GAAK,OAAI,kBAAC,EAAD,CAAOY,IAAKZ,EAAMa,GAAIb,MAAOA,UAJ/C,IAACU,GCiFJI,G,wNA5EbC,MAAQ,CACNL,OAAQ,CACN,CACI,GAAM,IACN,MAAS,cACT,SAAY,mBACZ,YAAe,iKACf,KAAQ,KACR,SAAY,qCACZ,OAAU,KAEd,CACI,GAAM,IACN,MAAS,gBACT,SAAY,iBACZ,YAAe,4HACf,KAAQ,KACR,SAAY,oCACZ,OAAU,KAEd,CACI,GAAM,IACN,MAAS,qBACT,SAAY,qBACZ,YAAe,qJACf,KAAQ,KACR,SAAY,oCACZ,OAAU,GAEd,CACI,GAAM,IACN,MAAS,kBACT,SAAY,kBACZ,YAAe,2LACf,KAAQ,KACR,SAAY,oCACZ,OAAU,KAEd,CACI,GAAM,IACN,MAAS,gBACT,SAAY,WACZ,YAAe,iKACf,KAAQ,KACR,SAAY,oCACZ,OAAU,KAEd,CACE,GAAM,IACN,MAAS,mBACT,SAAY,cACZ,YAAe,iKACf,KAAQ,KACR,SAAY,oCACZ,OAAU,O,uDASd,OADAM,QAAQC,IAAIC,KAAKH,MAAML,QAErB,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,aACd,kBAAC,EAAD,CACAc,OAAQQ,KAAKH,MAAML,e,GArEXS,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.64e5cb71.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NavBar(props) {\n    return (\n        <nav className=\"header navbar navbar-dark bg-dark\">\n        <div className=\"container\">\n            <div className=\"row m-auto\">\n                <i className=\"fa fa-film fa-2x text-white my-auto\"></i>\n                <div className=\"h3 ml-3 my-auto text-light\" href=\"/\">React Movie Cards</div>\n            </div>\n        </div>\n    </nav>\n    );\n  }\n  \n  export default NavBar;","import React from 'react';\n\nconst Movie = (props) => {\n    return ( \n        <div className=\"movie-card\">\n        <div className=\"movie-card card\">\n            <img className=\"card-img-top\" src={props.movie.imageUrl} alt=\"\" />\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{props.movie.title}</h4>\n                <h6 className=\"card-subtitle mb-2 text-muted\">{props.movie.subtitle}</h6>\n                <p className=\"text-justify\" style={{fontSize: '14px'}}>{props.movie.description}</p>\n            </div>\n            <div className=\"card-footer\">\n                <div className=\"clearfix\">\n                    <div className=\"float-left mt-1\">\n                        Rating:\n                    </div>\n                    <div className=\"card-footer-badge float-right badge badge-primary badge-pill\">{props.movie.rating}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n     );\n}\n \nexport default Movie;","import React from 'react';\nimport Movie from './movieCard';\n\nconst getMovies = (movies) => {\n    return (\n        <div className=\"card-deck\">\n            {\n                movies.map(movie => <Movie key={movie.id} movie={movie} />)\n            }\n        </div>\n    );\n};\n\n\nconst MovieList = (props) => {\n    return (\n        <div>\n            {getMovies(props.movies)}\n        </div>\n     );\n}\n \nexport default MovieList;","import React, { Component } from 'react';\nimport NavBar from './components/navBar';\nimport MovieList from './components/movieList';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n  state = { \n    movies: [\n      {\n          \"id\": 100,\n          \"title\": \"Kingsglaive\",\n          \"subtitle\": \"Final Fantasy XV\",\n          \"description\": \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n          \"year\": 2016,\n          \"imageUrl\": \"https://pasteboard.co/J1wzLOmx.jpg\",\n          \"rating\": 4.5\n      },\n      {\n          \"id\": 200,\n          \"title\": \"Final Fantasy\",\n          \"subtitle\": \"Spirits Within\",\n          \"description\": \"A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.\",\n          \"year\": 2001,\n          \"imageUrl\": \"https://pasteboard.co/J1wztOL.jpg\",\n          \"rating\": 4.5\n      },\n      {\n          \"id\": 300,\n          \"title\": \"Ghost In The Shell\",\n          \"subtitle\": \"Ghost In The Shell\",\n          \"description\": \"A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).\",\n          \"year\": 2008,\n          \"imageUrl\": \"https://pasteboard.co/J1wzBrO.jpg\",\n          \"rating\": 5\n      },\n      {\n          \"id\": 400,\n          \"title\": \"Appleseed Alpha\",\n          \"subtitle\": \"Appleseed Alpha\",\n          \"description\": \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n          \"year\": 2014,\n          \"imageUrl\": \"https://pasteboard.co/J1wzcH3.jpg\",\n          \"rating\": 3.8\n      },\n      {\n          \"id\": 500,\n          \"title\": \"Resident Evil\",\n          \"subtitle\": \"Vendetta\",\n          \"description\": \"Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.\",\n          \"year\": 2014,\n          \"imageUrl\": \"https://pasteboard.co/J1wzV3k.jpg\",\n          \"rating\": 4.2\n      },\n      {\n        \"id\": 600,\n        \"title\": \"Resident Evil II\",\n        \"subtitle\": \"Vendetta II\",\n        \"description\": \"Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.\",\n        \"year\": 2014,\n        \"imageUrl\": \"https://pasteboard.co/J1wzV3k.jpg\",\n        \"rating\": 4.2\n    },\n  ]\n   };\n\n\n\n  render() { \n    console.log(this.state.movies);\n    return ( \n      <div className=\"App\">\n        <NavBar />\n        <main className=\"container\">\n          <MovieList \n          movies={this.state.movies}\n          />\n        </main>\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}